package business

import mock "github.com/stretchr/testify/mock"

// DatabaseInterfaceMock is an autogenerated mock type for the DatabaseInterfaceMock type
type DatabaseInterfaceMock struct {
	mock.Mock
}

// AddPlanetToDatabase provides a mock function with given fields: _a0
func (_m *DatabaseInterfaceMock) AddPlanetToDatabase(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectToDB provides a mock function with given fields: _a0, _a1
func (_m *DatabaseInterfaceMock) ConnectToDB(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePlanet provides a mock function with given fields: ID
func (_m *DatabaseInterfaceMock) DeletePlanet(ID string) (bool, error) {
	ret := _m.Called(ID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanetByID provides a mock function with given fields: ID
func (_m *DatabaseInterfaceMock) GetPlanetByID(ID string) (*Planet, error) {
	ret := _m.Called(ID)

	var r0 *Planet
	if rf, ok := ret.Get(0).(func(string) *Planet); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanetFromDatabase provides a mock function with given fields:
func (_m *DatabaseInterfaceMock) GetPlanetFromDatabase() ([]Planet, error) {
	ret := _m.Called()

	var r0 []Planet
	if rf, ok := ret.Get(0).(func() []Planet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanetsByName provides a mock function with given fields: name
func (_m *DatabaseInterfaceMock) GetPlanetsByName(name string) ([]Planet, error) {
	ret := _m.Called(name)

	var r0 []Planet
	if rf, ok := ret.Get(0).(func(string) []Planet); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
